# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See the LICENSE.txt file in the project root
# for the license information.

# This script:
# * generates the `base.cs' file from the native header file.
# * has to be ran every time the header file changes.
# * needs to be ran on a Mac, therefore it's okay to check the generated file
#   into source control so that people on Windows can use the code.

FLEX_PATH = '../..'
DLL_NAME = 'flex'
OUTPUT_FILE = 'base.cs'

def die(*msg)
  $stderr.puts msg
  exit 1
end

flex_bs = '/tmp/flex.bs'
Dir.chdir(FLEX_PATH) do
  die "can't generate bridgesupport file" unless system("/usr/bin/gen_bridge_metadata -c '-I.' -o \"#{flex_bs}\" flex.h")
end

require 'rexml/document'
doc = REXML::Document.new(File.read(flex_bs))
root = doc.get_elements('signatures')[0]

enums = {}
root.get_elements('enum').each do |elem|
  enum_name = elem.attributes['name']
  die "invalid enum #{elem.to_s}" unless md = enum_name.match(/^FLEX_([^_]+)_(.+)$/)
  group = md[1].capitalize
  name = md[2].capitalize.gsub(/_(.)/) { |md| md[1].upcase }
  value = elem.attributes['value'].to_i
  (enums[group] ||= []) << [name, value]
end

def convert_type(type)
  case type.attributes['type']
    when 'I', 'i'
      'int'
    when 'f'
      'float'
    when /^\^/
      'IntPtr'
    else
      die "invalid type #{type}"
  end
end

functions = []
root.get_elements('function').each do |elem|
  name = elem.attributes['name']
  retval_elem = elem.get_elements('retval')
  retval = retval_elem.size == 1 ? convert_type(retval_elem[0]) : 'void'
  args = elem.get_elements('arg').map { |arg_elem| convert_type(arg_elem) }
  functions << [name, retval, args]
end

File.open(OUTPUT_FILE, 'w') do |io|
  io.puts <<EOS
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See the LICENSE.txt file in the project root
// for the license information.

// This file was generated by #{__FILE__}. Do not edit manually.

using System;
using System.Runtime.InteropServices;

EOS

  enums.to_a.sort { |x, y| x[0] <=> y[0] }.each do |group, values|
    io.puts "public enum Flex#{group} : int {"
    values.sort { |x, y| x[1] <=> y[1] }.each do |name, value|
      io.puts "    #{name} = #{value},"
    end
    io.puts '}'
    io.puts ''
  end

  io.puts "public class FlexNativeFunctions {"
  io.puts "    private const string dll_name = \"#{DLL_NAME}\";" 
  functions.sort { |x, y| x[0] <=> y[0] }.each do |name, retval, args|
    i = 0
    args.map! { |x| x + " arg#{i += 1}" }
    func_line = "#{retval} #{name} (#{args.join(', ')})"
    io.puts "    [DllImport(dll_name)] public static extern #{func_line};"
  end
  io.puts '}'
end
